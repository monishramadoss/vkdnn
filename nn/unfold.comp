#version 460
#define TILE_DIM 16
layout(push_constant) uniform pushBlock {
	uint output_total;
    uint kernel_total;
    uint ndims;
};

layout(local_size_x = 256, local_size_y = 4, local_size_z = 1) in;
layout (binding = 0) readonly buffer ssbA { float A[]; };
layout (binding = 1) readonly buffer ssbB { uint params[]; };
layout (binding = 2) writeonly buffer ssbC { float B[]; };

 
uint ksize(uint i){
    return params[i];
}

uint stride(uint i){
    return params[ndims + i];
}

uint padding(uint i ){
    return params[ndims * 2 + i];
}

uint dilation(uint i){
    return params[ndims * 3 + i];
}

uint iput(uint i){
    return params[ndims * 4 + i];
}

uint oput(uint i) {
    return params[ndims * 5 + i];
}

bool unfoldOffsetTransform(uint a, uint b, uint offset)
{

    bool start = true;
    uint off_a = a;
    uint off_b = b;
    int dim_offset = 0;
    uint idx_a = 0;
    uint idx_b = 0;

    for(uint i = ndims-1; ndims >= 0; --i){
        idx_a = off_a % oput(ndims + i);
        idx_b = off_b % oput(i);
        off_a = uint(floor(off_a / oput(ndims+i)));
        off_b = uint(floor(off_a / oput(i)));
        dim_offset = int(idx_a * stride(i) + idx_b * dilation(i) - padding(i));
        if(dim_offset < 0 || dim_offset >= iput(i))
            return false;
        if(start)
            offset += dim_offset;
        else
            offset += dim_offset * iput(i);

        start = false;            
    }

    return true;
}


void main(){
    
    for (uint a = gl_GlobalInvocationID.x; a < output_total; a += gl_NumWorkGroups.x * gl_WorkGroupSize.x)
    {
        for (uint b = gl_GlobalInvocationID.y; b < kernel_total; b += gl_NumWorkGroups.y * gl_WorkGroupSize.y)
        {
            uint in_offset = 0;
            uint out_offset = a * kernel_total + b;
            if(!unfoldOffsetTransform(a, b, in_offset))
                B[out_offset] = A[in_offset];
            else
                B[out_offset] = 0;
        }
    }
}