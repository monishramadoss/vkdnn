#version 460
#define TILE_DIM 16
layout(push_constant) uniform pushBlock {
	uint m;
	uint n;
	uint k;
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout (binding = 0) readonly buffer ssbA { float A[]; };
layout (binding = 1) readonly buffer ssbB { float B[]; };
layout (binding = 2) writeonly buffer ssbC { float C[]; };

shared float ATile[TILE_DIM][TILE_DIM];
shared float BTile[TILE_DIM][TILE_DIM];

void main() {
    uint bx = gl_WorkGroupID.x; // workgroupsize
    uint by = gl_WorkGroupID.y;
    uint thrX = gl_LocalInvocationID.x;
    uint thrY = gl_LocalInvocationID.y;
    uint col = gl_GlobalInvocationID.x; // bx * gl_workGroupSize.x + thrX;
    uint row = gl_GlobalInvocationID.y; // by * gl_WorkGroupSize.y + thrY;

    float elementC = 0;

    for (int t = 0; t < (n-1)/TILE_DIM +1; ++t)
    {
        //threads to load matrix A to shared memory
        if(row < m && t*TILE_DIM+thrX < n)
            ATile[thrY][thrX] = A[row*n + t*TILE_DIM+thrX];
        else
            ATile[thrY][thrX] = 0.0f;

        //threads to load matrix B to shared memory
        if (t*TILE_DIM+thrY < n && col < k)
            BTile[thrY][thrX] = B[(t*TILE_DIM+thrY)*k + col];
        else
            BTile[thrY][thrX] = 0.0f;

        barrier();
        //calculate a partial value of thread element in C
        for (int i = 0; i < TILE_DIM; ++i)
            elementC += ATile[thrY][i] * BTile[i][thrX];

        barrier();

    }
    //copy final element value to the C matrix
    if (row < m && col < k)
        C[row*k+col] = elementC;

}